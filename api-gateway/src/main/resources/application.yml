server:
  port: 8085
spring:
  redis:
    host: localhost
    port: 6379
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: http://localhost:8081/
          predicates:
            - Path=/api/user/**
          filters:
            - RewritePath=/api/user(?<segment>/?.*), /api/user-service/$\{segment}
            - name: CircuitBreaker
              args:
                name: circuitBreakerInstance
                fallbackUri: forward:/fallback/user
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 2
                redis-rate-limiter.burstCapacity: 4
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@KeyResolverConfiguration}"
        - id: product-service
          uri: http://localhost:8082/
          predicates:
            - Path=/api/product/**
          filters:
            - RewritePath=/api/product(?<segment>/?.*), /api/product-service/$\{segment}
            - name: CircuitBreaker
              args:
                name: circuitBreakerInstance
                fallbackUri: forward:/fallback/product
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 2
                redis-rate-limiter.burstCapacity: 4
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@KeyResolverConfiguration}"

#resilience4j:
#  circuitbreaker:
#    instances:
#      circuitBreakerInstance:
#        slidingWindowSize: 10
#        permittedNumberOfCallsInHalfOpenState: 5
#        failureRateThreshold: 50
#        waitDurationInOpenState: 10000            #10 seconds
#        registerHealthIndicator: true
#  timelimiter:
#    instances:
#      circuitBreakerInstance:
#        timeoutDuration: 2s